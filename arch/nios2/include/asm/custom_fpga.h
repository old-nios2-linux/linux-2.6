#ifndef _ALTERA_CPU_0_H_
#define _ALTERA_CPU_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 *
 * Created from SOPC Builder system 'system_0' in
 * file './system_0.sopcinfo'.
 */

/*
 * This file contains macros for module 'cpu_0' and devices
 * connected to the following masters:
 *   instruction_master
 *   tightly_coupled_instruction_master_0
 *   data_master
 *   tightly_coupled_data_master_0
 *
 * Do not #include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate #defines.
 * Instead, use the system header file which has #defines with unique names.
 */

/*
 * Macros for module 'cpu_0', class 'altera_nios2'.
 * The macros have no prefix.
 */
#define CPU_IMPLEMENTATION "fast"
#define CPU_FREQ 100000000u
#define ICACHE_LINE_SIZE 32
#define ICACHE_LINE_SIZE_LOG2 5
#define ICACHE_SIZE 4096
#define DCACHE_LINE_SIZE 4
#define DCACHE_LINE_SIZE_LOG2 2
#define DCACHE_SIZE 2048
#define FLUSHDA_SUPPORTED 
#define HAS_JMPI_INSTRUCTION 
#define MMU_PRESENT 
#define KERNEL_REGION_BASE 0xc0000000
#define IO_REGION_BASE 0xe0000000
#define KERNEL_MMU_REGION_BASE 0x80000000
#define USER_REGION_BASE 0x0
#define PROCESS_ID_NUM_BITS 10
#define TLB_NUM_WAYS 16
#define TLB_NUM_WAYS_LOG2 4
#define TLB_PTR_SZ 7
#define TLB_NUM_ENTRIES 128
#define FAST_TLB_MISS_EXCEPTION_ADDR 0xc0000000
#define EXCEPTION_ADDR 0xc2800020
#define RESET_ADDR 0xc1000000
#define BREAK_ADDR 0xc1480020
#define HAS_DEBUG_STUB 
#define HAS_DEBUG_CORE 1
#define HAS_ILLEGAL_INSTRUCTION_EXCEPTION 
#define HAS_ILLEGAL_MEMORY_ACCESS_EXCEPTION 
#define HAS_EXTRA_EXCEPTION_INFO 
#define CPU_ID_SIZE 1
#define CPU_ID_VALUE 0x0
#define HARDWARE_DIVIDE_PRESENT 0
#define HARDWARE_MULTIPLY_PRESENT 1
#define HARDWARE_MULX_PRESENT 0
#define INST_ADDR_WIDTH 26
#define DATA_ADDR_WIDTH 26

/*
 * Macros for device 'onchip_memory2_0', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'ONCHIP_MEMORY2_0_'.
 * The prefix is the slave descriptor.
 */
#define ONCHIP_MEMORY2_0_COMPONENT_TYPE altera_avalon_onchip_memory2
#define ONCHIP_MEMORY2_0_COMPONENT_NAME onchip_memory2_0
#define ONCHIP_MEMORY2_0_BASE 0x0
#define ONCHIP_MEMORY2_0_SPAN 512u
#define ONCHIP_MEMORY2_0_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define ONCHIP_MEMORY2_0_INIT_CONTENTS_FILE "onchip_memory2_0"
#define ONCHIP_MEMORY2_0_NON_DEFAULT_INIT_FILE_ENABLED 0
#define ONCHIP_MEMORY2_0_GUI_RAM_BLOCK_TYPE "Automatic"
#define ONCHIP_MEMORY2_0_WRITABLE 1
#define ONCHIP_MEMORY2_0_DUAL_PORT 1
#define ONCHIP_MEMORY2_0_SIZE_VALUE 512u
#define ONCHIP_MEMORY2_0_SIZE_MULTIPLE 1
#define ONCHIP_MEMORY2_0_CONTENTS_INFO ""
#define ONCHIP_MEMORY2_0_RAM_BLOCK_TYPE "Auto"
#define ONCHIP_MEMORY2_0_INIT_MEM_CONTENT 1
#define ONCHIP_MEMORY2_0_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define ONCHIP_MEMORY2_0_INSTANCE_ID "NONE"
#define ONCHIP_MEMORY2_0_READ_DURING_WRITE_MODE "DONT_CARE"

/*
 * Macros for device 'cfi_flash_0', class 'altera_avalon_cfi_flash'
 * The macros are prefixed with 'CFI_FLASH_0_'.
 * The prefix is the slave descriptor.
 */
#define CFI_FLASH_0_COMPONENT_TYPE altera_avalon_cfi_flash
#define CFI_FLASH_0_COMPONENT_NAME cfi_flash_0
#define CFI_FLASH_0_BASE 0x1000000
#define CFI_FLASH_0_SPAN 4194304u
#define CFI_FLASH_0_SETUP_VALUE 40
#define CFI_FLASH_0_WAIT_VALUE 160
#define CFI_FLASH_0_HOLD_VALUE 40
#define CFI_FLASH_0_TIMING_UNITS "ns"
#define CFI_FLASH_0_SIZE 4194304u

/*
 * Macros for device 'sram_0', class 'sram_16bit_512k'
 * The macros are prefixed with 'SRAM_0_'.
 * The prefix is the slave descriptor.
 */
#define SRAM_0_COMPONENT_TYPE sram_16bit_512k
#define SRAM_0_COMPONENT_NAME sram_0
#define SRAM_0_BASE 0x1400000
#define SRAM_0_SPAN 524288u

/*
 * Macros for device 'epcs_controller', class 'altera_avalon_epcs_flash_controller'
 * The macros are prefixed with 'EPCS_CONTROLLER_'.
 * The prefix is the slave descriptor.
 */
#define EPCS_CONTROLLER_COMPONENT_TYPE altera_avalon_epcs_flash_controller
#define EPCS_CONTROLLER_COMPONENT_NAME epcs_controller
#define EPCS_CONTROLLER_BASE 0x1480800
#define EPCS_CONTROLLER_SPAN 2048u
#define EPCS_CONTROLLER_IRQ 1
#define EPCS_CONTROLLER_REGISTER_OFFSET 512

/*
 * Macros for device 'timer_0', class 'altera_avalon_timer'
 * The macros are prefixed with 'TIMER_0_'.
 * The prefix is the slave descriptor.
 */
#define TIMER_0_COMPONENT_TYPE altera_avalon_timer
#define TIMER_0_COMPONENT_NAME timer_0
#define TIMER_0_BASE 0x1481000
#define TIMER_0_SPAN 32u
#define TIMER_0_IRQ 0
#define TIMER_0_ALWAYS_RUN 0
#define TIMER_0_FIXED_PERIOD 0
#define TIMER_0_SNAPSHOT 1
#define TIMER_0_PERIOD 1.0
#define TIMER_0_PERIOD_UNITS "ms"
#define TIMER_0_RESET_OUTPUT 0
#define TIMER_0_TIMEOUT_PULSE_OUTPUT 0
#define TIMER_0_FREQ 100000000u
#define TIMER_0_LOAD_VALUE 99999ULL
#define TIMER_0_COUNTER_SIZE 32
#define TIMER_0_MULT 0.0010
#define TIMER_0_TICKS_PER_SEC 1000u

/*
 * Macros for device 'uart_0', class 'altera_avalon_uart'
 * The macros are prefixed with 'UART_0_'.
 * The prefix is the slave descriptor.
 */
#define UART_0_COMPONENT_TYPE altera_avalon_uart
#define UART_0_COMPONENT_NAME uart_0
#define UART_0_BASE 0x1481020
#define UART_0_SPAN 32u
#define UART_0_IRQ 3
#define UART_0_BAUD 115200
#define UART_0_DATA_BITS 8
#define UART_0_FIXED_BAUD 1
#define UART_0_PARITY 'N'
#define UART_0_STOP_BITS 1
#define UART_0_SYNC_REG_DEPTH 2
#define UART_0_USE_CTS_RTS 0
#define UART_0_USE_EOP_REGISTER 0
#define UART_0_SIM_TRUE_BAUD 0
#define UART_0_SIM_CHAR_STREAM ""
#define UART_0_FREQ 100000000u

/*
 * Macros for device 'timer_1', class 'altera_avalon_timer'
 * The macros are prefixed with 'TIMER_1_'.
 * The prefix is the slave descriptor.
 */
#define TIMER_1_COMPONENT_TYPE altera_avalon_timer
#define TIMER_1_COMPONENT_NAME timer_1
#define TIMER_1_BASE 0x1481040
#define TIMER_1_SPAN 32u
#define TIMER_1_IRQ 4
#define TIMER_1_ALWAYS_RUN 0
#define TIMER_1_FIXED_PERIOD 0
#define TIMER_1_SNAPSHOT 1
#define TIMER_1_PERIOD 1.0
#define TIMER_1_PERIOD_UNITS "ms"
#define TIMER_1_RESET_OUTPUT 0
#define TIMER_1_TIMEOUT_PULSE_OUTPUT 0
#define TIMER_1_FREQ 100000000u
#define TIMER_1_LOAD_VALUE 99999ULL
#define TIMER_1_COUNTER_SIZE 32
#define TIMER_1_MULT 0.0010
#define TIMER_1_TICKS_PER_SEC 1000u

/*
 * Macros for device 'lcd_16207_0', class 'altera_avalon_lcd_16207'
 * The macros are prefixed with 'LCD_16207_0_'.
 * The prefix is the slave descriptor.
 */
#define LCD_16207_0_COMPONENT_TYPE altera_avalon_lcd_16207
#define LCD_16207_0_COMPONENT_NAME lcd_16207_0
#define LCD_16207_0_BASE 0x1481060
#define LCD_16207_0_SPAN 16u

/*
 * Macros for device 'led_red', class 'altera_avalon_pio'
 * The macros are prefixed with 'LED_RED_'.
 * The prefix is the slave descriptor.
 */
#define LED_RED_COMPONENT_TYPE altera_avalon_pio
#define LED_RED_COMPONENT_NAME led_red
#define LED_RED_BASE 0x1481070
#define LED_RED_SPAN 16u
#define LED_RED_DO_TEST_BENCH_WIRING 0
#define LED_RED_DRIVEN_SIM_VALUE 0x0
#define LED_RED_HAS_TRI 0
#define LED_RED_HAS_OUT 1
#define LED_RED_HAS_IN 0
#define LED_RED_CAPTURE 0
#define LED_RED_BIT_CLEARING_EDGE_REGISTER 0
#define LED_RED_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LED_RED_DATA_WIDTH 18
#define LED_RED_RESET_VALUE 0x0
#define LED_RED_EDGE_TYPE "NONE"
#define LED_RED_IRQ_TYPE "NONE"
#define LED_RED_FREQ 100000000u

/*
 * Macros for device 'led_green', class 'altera_avalon_pio'
 * The macros are prefixed with 'LED_GREEN_'.
 * The prefix is the slave descriptor.
 */
#define LED_GREEN_COMPONENT_TYPE altera_avalon_pio
#define LED_GREEN_COMPONENT_NAME led_green
#define LED_GREEN_BASE 0x1481080
#define LED_GREEN_SPAN 16u
#define LED_GREEN_DO_TEST_BENCH_WIRING 0
#define LED_GREEN_DRIVEN_SIM_VALUE 0x0
#define LED_GREEN_HAS_TRI 0
#define LED_GREEN_HAS_OUT 1
#define LED_GREEN_HAS_IN 0
#define LED_GREEN_CAPTURE 0
#define LED_GREEN_BIT_CLEARING_EDGE_REGISTER 0
#define LED_GREEN_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LED_GREEN_DATA_WIDTH 9
#define LED_GREEN_RESET_VALUE 0x0
#define LED_GREEN_EDGE_TYPE "NONE"
#define LED_GREEN_IRQ_TYPE "NONE"
#define LED_GREEN_FREQ 100000000u

/*
 * Macros for device 'button_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'BUTTON_PIO_'.
 * The prefix is the slave descriptor.
 */
#define BUTTON_PIO_COMPONENT_TYPE altera_avalon_pio
#define BUTTON_PIO_COMPONENT_NAME button_pio
#define BUTTON_PIO_BASE 0x1481090
#define BUTTON_PIO_SPAN 16u
#define BUTTON_PIO_IRQ 5
#define BUTTON_PIO_DO_TEST_BENCH_WIRING 0
#define BUTTON_PIO_DRIVEN_SIM_VALUE 0x0
#define BUTTON_PIO_HAS_TRI 0
#define BUTTON_PIO_HAS_OUT 0
#define BUTTON_PIO_HAS_IN 1
#define BUTTON_PIO_CAPTURE 1
#define BUTTON_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define BUTTON_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BUTTON_PIO_DATA_WIDTH 4
#define BUTTON_PIO_RESET_VALUE 0x0
#define BUTTON_PIO_EDGE_TYPE "FALLING"
#define BUTTON_PIO_IRQ_TYPE "EDGE"
#define BUTTON_PIO_FREQ 100000000u

/*
 * Macros for device 'switch_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'SWITCH_PIO_'.
 * The prefix is the slave descriptor.
 */
#define SWITCH_PIO_COMPONENT_TYPE altera_avalon_pio
#define SWITCH_PIO_COMPONENT_NAME switch_pio
#define SWITCH_PIO_BASE 0x14810a0
#define SWITCH_PIO_SPAN 16u
#define SWITCH_PIO_DO_TEST_BENCH_WIRING 0
#define SWITCH_PIO_DRIVEN_SIM_VALUE 0x0
#define SWITCH_PIO_HAS_TRI 0
#define SWITCH_PIO_HAS_OUT 0
#define SWITCH_PIO_HAS_IN 1
#define SWITCH_PIO_CAPTURE 0
#define SWITCH_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define SWITCH_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SWITCH_PIO_DATA_WIDTH 18
#define SWITCH_PIO_RESET_VALUE 0x0
#define SWITCH_PIO_EDGE_TYPE "NONE"
#define SWITCH_PIO_IRQ_TYPE "NONE"
#define SWITCH_PIO_FREQ 100000000u

/*
 * Macros for device 'SD_DAT', class 'altera_avalon_pio'
 * The macros are prefixed with 'SD_DAT_'.
 * The prefix is the slave descriptor.
 */
#define SD_DAT_COMPONENT_TYPE altera_avalon_pio
#define SD_DAT_COMPONENT_NAME SD_DAT
#define SD_DAT_BASE 0x14810b0
#define SD_DAT_SPAN 16u
#define SD_DAT_DO_TEST_BENCH_WIRING 0
#define SD_DAT_DRIVEN_SIM_VALUE 0x0
#define SD_DAT_HAS_TRI 1
#define SD_DAT_HAS_OUT 0
#define SD_DAT_HAS_IN 0
#define SD_DAT_CAPTURE 0
#define SD_DAT_BIT_CLEARING_EDGE_REGISTER 0
#define SD_DAT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SD_DAT_DATA_WIDTH 1
#define SD_DAT_RESET_VALUE 0x0
#define SD_DAT_EDGE_TYPE "NONE"
#define SD_DAT_IRQ_TYPE "NONE"
#define SD_DAT_FREQ 100000000u

/*
 * Macros for device 'SD_CMD', class 'altera_avalon_pio'
 * The macros are prefixed with 'SD_CMD_'.
 * The prefix is the slave descriptor.
 */
#define SD_CMD_COMPONENT_TYPE altera_avalon_pio
#define SD_CMD_COMPONENT_NAME SD_CMD
#define SD_CMD_BASE 0x14810c0
#define SD_CMD_SPAN 16u
#define SD_CMD_DO_TEST_BENCH_WIRING 0
#define SD_CMD_DRIVEN_SIM_VALUE 0x0
#define SD_CMD_HAS_TRI 1
#define SD_CMD_HAS_OUT 0
#define SD_CMD_HAS_IN 0
#define SD_CMD_CAPTURE 0
#define SD_CMD_BIT_CLEARING_EDGE_REGISTER 0
#define SD_CMD_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SD_CMD_DATA_WIDTH 1
#define SD_CMD_RESET_VALUE 0x0
#define SD_CMD_EDGE_TYPE "NONE"
#define SD_CMD_IRQ_TYPE "NONE"
#define SD_CMD_FREQ 100000000u

/*
 * Macros for device 'SD_CLK', class 'altera_avalon_pio'
 * The macros are prefixed with 'SD_CLK_'.
 * The prefix is the slave descriptor.
 */
#define SD_CLK_COMPONENT_TYPE altera_avalon_pio
#define SD_CLK_COMPONENT_NAME SD_CLK
#define SD_CLK_BASE 0x14810d0
#define SD_CLK_SPAN 16u
#define SD_CLK_DO_TEST_BENCH_WIRING 0
#define SD_CLK_DRIVEN_SIM_VALUE 0x0
#define SD_CLK_HAS_TRI 0
#define SD_CLK_HAS_OUT 1
#define SD_CLK_HAS_IN 0
#define SD_CLK_CAPTURE 0
#define SD_CLK_BIT_CLEARING_EDGE_REGISTER 0
#define SD_CLK_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SD_CLK_DATA_WIDTH 1
#define SD_CLK_RESET_VALUE 0x0
#define SD_CLK_EDGE_TYPE "NONE"
#define SD_CLK_IRQ_TYPE "NONE"
#define SD_CLK_FREQ 100000000u

/*
 * Macros for device 'vga_controller_0', class 'vga_controller_classic'
 * The macros are prefixed with 'VGA_CONTROLLER_0_'.
 * The prefix is the slave descriptor.
 */
#define VGA_CONTROLLER_0_COMPONENT_TYPE vga_controller_classic
#define VGA_CONTROLLER_0_COMPONENT_NAME vga_controller_0
#define VGA_CONTROLLER_0_BASE 0x14810e0
#define VGA_CONTROLLER_0_SPAN 16u
#define VGA_CONTROLLER_0_RESET_VALUE 0
#define VGA_CONTROLLER_0_COLOR_DEPTH 16
#define VGA_CONTROLLER_0_DMA_BURSTING 0
#define VGA_CONTROLLER_0_FIFO_DEPTH 4096
#define VGA_CONTROLLER_0_SCREEN_RESOLUTION "640x480"
#define VGA_CONTROLLER_0_SCREEN_WIDTH 640
#define VGA_CONTROLLER_0_SCREEN_HEIGHT 480
#define VGA_CONTROLLER_0_SYNC_POLARITY 0
#define VGA_CONTROLLER_0_FRAME_BUFFERS 1

/*
 * Macros for device 'jtag_uart_0', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_0_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_0_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_0_COMPONENT_NAME jtag_uart_0
#define JTAG_UART_0_BASE 0x1481100
#define JTAG_UART_0_SPAN 8u
#define JTAG_UART_0_IRQ 2
#define JTAG_UART_0_WRITE_DEPTH 64
#define JTAG_UART_0_READ_DEPTH 64
#define JTAG_UART_0_WRITE_THRESHOLD 8
#define JTAG_UART_0_READ_THRESHOLD 8

/*
 * Macros for device 'dm9000', class 'dm9000a'
 * The macros are prefixed with 'DM9000_'.
 * The prefix is the slave descriptor.
 */
#define DM9000_COMPONENT_TYPE dm9000a
#define DM9000_COMPONENT_NAME dm9000
#define DM9000_BASE 0x1481108
#define DM9000_SPAN 8u
#define DM9000_IRQ 6

/*
 * Macros for device 'ps2_0', class 'altera_up_avalon_ps2_classic'
 * The macros are prefixed with 'PS2_0_'.
 * The prefix is the slave descriptor.
 */
#define PS2_0_COMPONENT_TYPE altera_up_avalon_ps2_classic
#define PS2_0_COMPONENT_NAME ps2_0
#define PS2_0_BASE 0x1481110
#define PS2_0_SPAN 8u
#define PS2_0_IRQ 9

/*
 * Macros for device 'SEG7_Display', class 'seg7_lut_8'
 * The macros are prefixed with 'SEG7_DISPLAY_'.
 * The prefix is the slave descriptor.
 */
#define SEG7_DISPLAY_COMPONENT_TYPE seg7_lut_8
#define SEG7_DISPLAY_COMPONENT_NAME SEG7_Display
#define SEG7_DISPLAY_BASE 0x1481120
#define SEG7_DISPLAY_SPAN 4u

/*
 * Macros for device 'Audio_0', class 'audio_dac_fifo'
 * The macros are prefixed with 'AUDIO_0_'.
 * The prefix is the slave descriptor.
 */
#define AUDIO_0_COMPONENT_TYPE audio_dac_fifo
#define AUDIO_0_COMPONENT_NAME Audio_0
#define AUDIO_0_BASE 0x1481124
#define AUDIO_0_SPAN 4u

/*
 * Macros for device 'sdram_0', class 'altera_avalon_new_sdram_controller'
 * The macros are prefixed with 'SDRAM_0_'.
 * The prefix is the slave descriptor.
 */
#define SDRAM_0_COMPONENT_TYPE altera_avalon_new_sdram_controller
#define SDRAM_0_COMPONENT_NAME sdram_0
#define SDRAM_0_BASE 0x2800000
#define SDRAM_0_SPAN 8388608u
#define SDRAM_0_REGISTER_DATA_IN 1
#define SDRAM_0_SIM_MODEL_BASE 1
#define SDRAM_0_SDRAM_DATA_WIDTH 16
#define SDRAM_0_SDRAM_ADDR_WIDTH 22
#define SDRAM_0_SDRAM_ROW_WIDTH 12
#define SDRAM_0_SDRAM_COL_WIDTH 8
#define SDRAM_0_SDRAM_NUM_CHIPSELECTS 1
#define SDRAM_0_SDRAM_NUM_BANKS 4
#define SDRAM_0_REFRESH_PERIOD 15.625
#define SDRAM_0_POWERUP_DELAY 100.0
#define SDRAM_0_CAS_LATENCY 3
#define SDRAM_0_T_RFC 70.0
#define SDRAM_0_T_RP 20.0
#define SDRAM_0_T_MRD 3
#define SDRAM_0_T_RCD 20.0
#define SDRAM_0_T_AC 5.5
#define SDRAM_0_T_WR 14.0
#define SDRAM_0_INIT_REFRESH_COMMANDS 2
#define SDRAM_0_INIT_NOP_DELAY 0.0
#define SDRAM_0_SHARED_DATA 0
#define SDRAM_0_STARVATION_INDICATOR 0
#define SDRAM_0_TRISTATE_BRIDGE_SLAVE ""
#define SDRAM_0_IS_INITIALIZED 1
#define SDRAM_0_SDRAM_BANK_WIDTH 2
#define SDRAM_0_CONTENTS_INFO ""


#endif /* _ALTERA_CPU_0_H_ */
