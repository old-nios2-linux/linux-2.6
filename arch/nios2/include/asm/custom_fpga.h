#ifndef _CPU_H_
#define _CPU_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 *
 * Created from SOPC Builder system 'cycloneIII_embedded_evaluation_kit_web_server_sopc' in
 * file './cycloneIII_embedded_evaluation_kit_web_server_sopc.sopcinfo'.
 */

/*
 * This file contains macros for module 'cpu' and devices
 * connected to the following masters:
 *   instruction_master
 *   tightly_coupled_instruction_master_0
 *   data_master
 *   tightly_coupled_data_master_0
 *
 * Do not #include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate #defines.
 * Instead, use the system header file which has #defines with unique names.
 */

/*
 * Macros for module 'cpu', class 'altera_nios2'.
 * The macros have no prefix.
 */
#define CPU_IMPLEMENTATION "fast"
#define ICACHE_LINE_SIZE 32
#define ICACHE_LINE_SIZE_LOG2 5
#define ICACHE_SIZE 4096
#define DCACHE_LINE_SIZE 32
#define DCACHE_LINE_SIZE_LOG2 5
#define DCACHE_SIZE 2048
#define INITDA_SUPPORTED 
#define FLUSHDA_SUPPORTED 
#define HAS_JMPI_INSTRUCTION 
#define MMU_PRESENT 
#define KERNEL_REGION_BASE 0xc0000000
#define IO_REGION_BASE 0xe0000000
#define KERNEL_MMU_REGION_BASE 0x80000000
#define USER_REGION_BASE 0x0
#define PROCESS_ID_NUM_BITS 10
#define TLB_NUM_WAYS 16
#define TLB_PTR_SZ 8
#define TLB_NUM_ENTRIES 256
#define FAST_TLB_MISS_EXCEPTION_ADDR 0xc6000800
#define EXCEPTION_ADDR 0xc5000020
#define RESET_ADDR 0xc4000000
#define BREAK_ADDR 0xc6000020
#define HAS_DEBUG_STUB 
#define HAS_DEBUG_CORE 1
#define HAS_ILLEGAL_INSTRUCTION_EXCEPTION 
#define HAS_ILLEGAL_MEMORY_ACCESS_EXCEPTION 
#define HAS_EXTRA_EXCEPTION_INFO 
#define CPU_ID_SIZE 1
#define CPU_ID_VALUE 0x0
#define HARDWARE_DIVIDE_PRESENT 0
#define HARDWARE_MULTIPLY_PRESENT 1
#define HARDWARE_MULX_PRESENT 0
#define INST_ADDR_WIDTH 27
#define DATA_ADDR_WIDTH 28

/*
 * Macros for device 'ddr_sdram', class 'altmemddr'
 * The macros are prefixed with 'DDR_SDRAM_'.
 * The prefix is the slave descriptor.
 */
#define DDR_SDRAM_BASE 0x0
#define DDR_SDRAM_SPAN 33554432u

/*
 * Macros for device 'lcd_sgdma', class 'altera_avalon_sgdma'
 * The macros are prefixed with 'LCD_SGDMA_'.
 * The prefix is the slave descriptor.
 */
#define LCD_SGDMA_BASE 0x2000000
#define LCD_SGDMA_SPAN 1024u
#define LCD_SGDMA_IRQ 2
#define LCD_SGDMA_READ_BLOCK_DATA_WIDTH 64
#define LCD_SGDMA_WRITE_BLOCK_DATA_WIDTH 64
#define LCD_SGDMA_STREAM_DATA_WIDTH 64
#define LCD_SGDMA_ADDRESS_WIDTH 32
#define LCD_SGDMA_HAS_READ_BLOCK 1
#define LCD_SGDMA_HAS_WRITE_BLOCK 0
#define LCD_SGDMA_READ_BURSTCOUNT_WIDTH 4
#define LCD_SGDMA_WRITE_BURSTCOUNT_WIDTH 4
#define LCD_SGDMA_BURST_TRANSFER 0
#define LCD_SGDMA_ALWAYS_DO_MAX_BURST 1
#define LCD_SGDMA_DESCRIPTOR_READ_BURST 0
#define LCD_SGDMA_UNALIGNED_TRANSFER 0
#define LCD_SGDMA_CONTROL_SLAVE_DATA_WIDTH 32
#define LCD_SGDMA_CONTROL_SLAVE_ADDRESS_WIDTH 8
#define LCD_SGDMA_DESC_DATA_WIDTH 32
#define LCD_SGDMA_CHAIN_WRITEBACK_DATA_WIDTH 32
#define LCD_SGDMA_STATUS_TOKEN_DATA_WIDTH 24
#define LCD_SGDMA_BYTES_TO_TRANSFER_DATA_WIDTH 16
#define LCD_SGDMA_BURST_DATA_WIDTH 8
#define LCD_SGDMA_CONTROL_DATA_WIDTH 8
#define LCD_SGDMA_ATLANTIC_CHANNEL_DATA_WIDTH 4
#define LCD_SGDMA_COMMAND_FIFO_DATA_WIDTH 104
#define LCD_SGDMA_SYMBOLS_PER_BEAT 8
#define LCD_SGDMA_IN_ERROR_WIDTH 0
#define LCD_SGDMA_OUT_ERROR_WIDTH 0

/*
 * Macros for device 'ddr_sdram', class 'altmemddr'
 * Path to the device is from the master group 'lcd_sgdma_m_read'.
 * The macros are prefixed with 'LCD_SGDMA_M_READ_DDR_SDRAM_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define LCD_SGDMA_M_READ_DDR_SDRAM_BASE 0x0
#define LCD_SGDMA_M_READ_DDR_SDRAM_SPAN 33554432u

/*
 * Macros for device 'ext_flash', class 'altera_avalon_cfi_flash'
 * The macros are prefixed with 'EXT_FLASH_'.
 * The prefix is the slave descriptor.
 */
#define EXT_FLASH_BASE 0x4000000
#define EXT_FLASH_SPAN 16777216u
#define EXT_FLASH_SETUP_VALUE 25
#define EXT_FLASH_WAIT_VALUE 70
#define EXT_FLASH_HOLD_VALUE 20
#define EXT_FLASH_TIMING_UNITS "ns"
#define EXT_FLASH_SIZE 16777216u

/*
 * Macros for device 'ssram', class 'altera_avalon_cy7c1380_ssram'
 * The macros are prefixed with 'SSRAM_'.
 * The prefix is the slave descriptor.
 */
#define SSRAM_BASE 0x5000000
#define SSRAM_SPAN 1048576u
#define SSRAM_SRAM_MEMORY_SIZE 1
#define SSRAM_SRAM_MEMORY_UNITS 1048576
#define SSRAM_SSRAM_DATA_WIDTH 32
#define SSRAM_SSRAM_READ_LATENCY 2

/*
 * Macros for device 'onchip_memory2_0', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'ONCHIP_MEMORY2_0_'.
 * The prefix is the slave descriptor.
 */
#define ONCHIP_MEMORY2_0_BASE 0x6000800
#define ONCHIP_MEMORY2_0_SPAN 1024u
#define ONCHIP_MEMORY2_0_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define ONCHIP_MEMORY2_0_INIT_CONTENTS_FILE "onchip_memory2_0"
#define ONCHIP_MEMORY2_0_NON_DEFAULT_INIT_FILE_ENABLED 0
#define ONCHIP_MEMORY2_0_GUI_RAM_BLOCK_TYPE "Automatic"
#define ONCHIP_MEMORY2_0_WRITABLE 1
#define ONCHIP_MEMORY2_0_DUAL_PORT 1
#define ONCHIP_MEMORY2_0_SIZE_VALUE 1024u
#define ONCHIP_MEMORY2_0_SIZE_MULTIPLE 1
#define ONCHIP_MEMORY2_0_CONTENTS_INFO ""
#define ONCHIP_MEMORY2_0_RAM_BLOCK_TYPE "Auto"
#define ONCHIP_MEMORY2_0_INIT_MEM_CONTENT 1
#define ONCHIP_MEMORY2_0_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define ONCHIP_MEMORY2_0_INSTANCE_ID "NONE"
#define ONCHIP_MEMORY2_0_READ_DURING_WRITE_MODE "DONT_CARE"

/*
 * Macros for device 'sys_clk_timer', class 'altera_avalon_timer'
 * The macros are prefixed with 'SYS_CLK_TIMER_'.
 * The prefix is the slave descriptor.
 */
#define SYS_CLK_TIMER_BASE 0x8000100
#define SYS_CLK_TIMER_SPAN 256u
#define SYS_CLK_TIMER_IRQ 8
#define SYS_CLK_TIMER_ALWAYS_RUN 0
#define SYS_CLK_TIMER_FIXED_PERIOD 0
#define SYS_CLK_TIMER_SNAPSHOT 1
#define SYS_CLK_TIMER_PERIOD 10.0
#define SYS_CLK_TIMER_PERIOD_UNITS "ms"
#define SYS_CLK_TIMER_RESET_OUTPUT 0
#define SYS_CLK_TIMER_TIMEOUT_PULSE_OUTPUT 0
#define SYS_CLK_TIMER_FREQ 60000000u
#define SYS_CLK_TIMER_LOAD_VALUE 599999ULL
#define SYS_CLK_TIMER_COUNTER_SIZE 32
#define SYS_CLK_TIMER_MULT 0.0010
#define SYS_CLK_TIMER_TICKS_PER_SEC 100u

/*
 * Macros for device 'sysid', class 'altera_avalon_sysid'
 * The macros are prefixed with 'SYSID_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_BASE 0x8000200
#define SYSID_SPAN 64u
#define SYSID_ID 899800840u
#define SYSID_TIMESTAMP 1244208166u

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_BASE 0x8002000
#define JTAG_UART_SPAN 64u
#define JTAG_UART_IRQ 10
#define JTAG_UART_WRITE_DEPTH 8
#define JTAG_UART_READ_DEPTH 8
#define JTAG_UART_WRITE_THRESHOLD 4
#define JTAG_UART_READ_THRESHOLD 4

/*
 * Macros for device 'button_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'BUTTON_PIO_'.
 * The prefix is the slave descriptor.
 */
#define BUTTON_PIO_BASE 0x8004000
#define BUTTON_PIO_SPAN 128u
#define BUTTON_PIO_IRQ 12
#define BUTTON_PIO_DO_TEST_BENCH_WIRING 1
#define BUTTON_PIO_DRIVEN_SIM_VALUE 0xf
#define BUTTON_PIO_HAS_TRI 0
#define BUTTON_PIO_HAS_OUT 0
#define BUTTON_PIO_HAS_IN 1
#define BUTTON_PIO_CAPTURE 1
#define BUTTON_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define BUTTON_PIO_DATA_WIDTH 4
#define BUTTON_PIO_RESET_VALUE 0x0
#define BUTTON_PIO_EDGE_TYPE "RISING"
#define BUTTON_PIO_IRQ_TYPE "EDGE"
#define BUTTON_PIO_FREQ 60000000u

/*
 * Macros for device 'led_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'LED_PIO_'.
 * The prefix is the slave descriptor.
 */
#define LED_PIO_BASE 0x8005000
#define LED_PIO_SPAN 128u
#define LED_PIO_DO_TEST_BENCH_WIRING 0
#define LED_PIO_DRIVEN_SIM_VALUE 0x0
#define LED_PIO_HAS_TRI 0
#define LED_PIO_HAS_OUT 1
#define LED_PIO_HAS_IN 0
#define LED_PIO_CAPTURE 0
#define LED_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define LED_PIO_DATA_WIDTH 2
#define LED_PIO_RESET_VALUE 0x0
#define LED_PIO_EDGE_TYPE "NONE"
#define LED_PIO_IRQ_TYPE "NONE"
#define LED_PIO_FREQ 60000000u

/*
 * Macros for device 'pio_id_eeprom_dat', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_ID_EEPROM_DAT_'.
 * The prefix is the slave descriptor.
 */
#define PIO_ID_EEPROM_DAT_BASE 0x8006000
#define PIO_ID_EEPROM_DAT_SPAN 128u
#define PIO_ID_EEPROM_DAT_DO_TEST_BENCH_WIRING 0
#define PIO_ID_EEPROM_DAT_DRIVEN_SIM_VALUE 0x0
#define PIO_ID_EEPROM_DAT_HAS_TRI 1
#define PIO_ID_EEPROM_DAT_HAS_OUT 0
#define PIO_ID_EEPROM_DAT_HAS_IN 0
#define PIO_ID_EEPROM_DAT_CAPTURE 0
#define PIO_ID_EEPROM_DAT_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_ID_EEPROM_DAT_DATA_WIDTH 1
#define PIO_ID_EEPROM_DAT_RESET_VALUE 0x0
#define PIO_ID_EEPROM_DAT_EDGE_TYPE "NONE"
#define PIO_ID_EEPROM_DAT_IRQ_TYPE "NONE"
#define PIO_ID_EEPROM_DAT_FREQ 60000000u

/*
 * Macros for device 'pio_id_eeprom_scl', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_ID_EEPROM_SCL_'.
 * The prefix is the slave descriptor.
 */
#define PIO_ID_EEPROM_SCL_BASE 0x8007000
#define PIO_ID_EEPROM_SCL_SPAN 128u
#define PIO_ID_EEPROM_SCL_DO_TEST_BENCH_WIRING 0
#define PIO_ID_EEPROM_SCL_DRIVEN_SIM_VALUE 0x0
#define PIO_ID_EEPROM_SCL_HAS_TRI 0
#define PIO_ID_EEPROM_SCL_HAS_OUT 1
#define PIO_ID_EEPROM_SCL_HAS_IN 0
#define PIO_ID_EEPROM_SCL_CAPTURE 0
#define PIO_ID_EEPROM_SCL_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_ID_EEPROM_SCL_DATA_WIDTH 1
#define PIO_ID_EEPROM_SCL_RESET_VALUE 0x0
#define PIO_ID_EEPROM_SCL_EDGE_TYPE "NONE"
#define PIO_ID_EEPROM_SCL_IRQ_TYPE "NONE"
#define PIO_ID_EEPROM_SCL_FREQ 60000000u

/*
 * Macros for device 'touch_panel_pen_irq_n', class 'altera_avalon_pio'
 * The macros are prefixed with 'TOUCH_PANEL_PEN_IRQ_N_'.
 * The prefix is the slave descriptor.
 */
#define TOUCH_PANEL_PEN_IRQ_N_BASE 0x8010000
#define TOUCH_PANEL_PEN_IRQ_N_SPAN 128u
#define TOUCH_PANEL_PEN_IRQ_N_IRQ 14
#define TOUCH_PANEL_PEN_IRQ_N_DO_TEST_BENCH_WIRING 0
#define TOUCH_PANEL_PEN_IRQ_N_DRIVEN_SIM_VALUE 0x0
#define TOUCH_PANEL_PEN_IRQ_N_HAS_TRI 0
#define TOUCH_PANEL_PEN_IRQ_N_HAS_OUT 0
#define TOUCH_PANEL_PEN_IRQ_N_HAS_IN 1
#define TOUCH_PANEL_PEN_IRQ_N_CAPTURE 1
#define TOUCH_PANEL_PEN_IRQ_N_BIT_CLEARING_EDGE_REGISTER 0
#define TOUCH_PANEL_PEN_IRQ_N_DATA_WIDTH 1
#define TOUCH_PANEL_PEN_IRQ_N_RESET_VALUE 0x0
#define TOUCH_PANEL_PEN_IRQ_N_EDGE_TYPE "FALLING"
#define TOUCH_PANEL_PEN_IRQ_N_IRQ_TYPE "EDGE"
#define TOUCH_PANEL_PEN_IRQ_N_FREQ 60000000u

/*
 * Macros for device 'touch_panel_spi', class 'altera_avalon_spi'
 * The macros are prefixed with 'TOUCH_PANEL_SPI_'.
 * The prefix is the slave descriptor.
 */
#define TOUCH_PANEL_SPI_BASE 0x8011000
#define TOUCH_PANEL_SPI_SPAN 256u
#define TOUCH_PANEL_SPI_IRQ 16
#define TOUCH_PANEL_SPI_DATABITS 8
#define TOUCH_PANEL_SPI_DATAWIDTH 16
#define TOUCH_PANEL_SPI_TARGETCLOCK 32000u
#define TOUCH_PANEL_SPI_CLOCKUNITS "Hz"
#define TOUCH_PANEL_SPI_CLOCKMULT 1
#define TOUCH_PANEL_SPI_NUMSLAVES 1
#define TOUCH_PANEL_SPI_ISMASTER 1
#define TOUCH_PANEL_SPI_CLOCKPOLARITY 0
#define TOUCH_PANEL_SPI_CLOCKPHASE 0
#define TOUCH_PANEL_SPI_LSBFIRST 0
#define TOUCH_PANEL_SPI_EXTRADELAY 0
#define TOUCH_PANEL_SPI_TARGETSSDELAY "0.0"
#define TOUCH_PANEL_SPI_DELAYUNITS "ns"
#define TOUCH_PANEL_SPI_DELAYMULT "1.0E-9"
#define TOUCH_PANEL_SPI_PREFIX "spi_"

/*
 * Macros for device 'performance_counter', class 'altera_avalon_performance_counter'
 * The macros are prefixed with 'PERFORMANCE_COUNTER_'.
 * The prefix is the slave descriptor.
 */
#define PERFORMANCE_COUNTER_BASE 0x8020000
#define PERFORMANCE_COUNTER_SPAN 256u
#define PERFORMANCE_COUNTER_HOW_MANY_SECTIONS 1

/*
 * Macros for device 'pll', class 'altera_avalon_pll'
 * The macros are prefixed with 'PLL_'.
 * The prefix is the slave descriptor.
 */
#define PLL_BASE 0x8200000
#define PLL_SPAN 256u
#define PLL_ARESET "None"
#define PLL_PFDENA "None"
#define PLL_LOCKED "None"
#define PLL_PLLENA "None"
#define PLL_SCANCLK "None"
#define PLL_SCANDATA "None"
#define PLL_SCANREAD "None"
#define PLL_SCANWRITE "None"
#define PLL_SCANCLKENA "None"
#define PLL_SCANACLR "None"
#define PLL_SCANDATAOUT "None"
#define PLL_SCANDONE "None"
#define PLL_CONFIGUPDATE "None"
#define PLL_PHASECOUNTERSELECT "None"
#define PLL_PHASEDONE "None"
#define PLL_PHASEUPDOWN "None"
#define PLL_PHASESTEP "None"

/*
 * Macros for device 'lcd_i2c_en', class 'altera_avalon_pio'
 * The macros are prefixed with 'LCD_I2C_EN_'.
 * The prefix is the slave descriptor.
 */
#define LCD_I2C_EN_BASE 0x8360000
#define LCD_I2C_EN_SPAN 128u
#define LCD_I2C_EN_DO_TEST_BENCH_WIRING 0
#define LCD_I2C_EN_DRIVEN_SIM_VALUE 0x0
#define LCD_I2C_EN_HAS_TRI 0
#define LCD_I2C_EN_HAS_OUT 1
#define LCD_I2C_EN_HAS_IN 0
#define LCD_I2C_EN_CAPTURE 0
#define LCD_I2C_EN_BIT_CLEARING_EDGE_REGISTER 0
#define LCD_I2C_EN_DATA_WIDTH 1
#define LCD_I2C_EN_RESET_VALUE 0x0
#define LCD_I2C_EN_EDGE_TYPE "NONE"
#define LCD_I2C_EN_IRQ_TYPE "NONE"
#define LCD_I2C_EN_FREQ 60000000u

/*
 * Macros for device 'lcd_i2c_sdat', class 'altera_avalon_pio'
 * The macros are prefixed with 'LCD_I2C_SDAT_'.
 * The prefix is the slave descriptor.
 */
#define LCD_I2C_SDAT_BASE 0x8360100
#define LCD_I2C_SDAT_SPAN 128u
#define LCD_I2C_SDAT_DO_TEST_BENCH_WIRING 0
#define LCD_I2C_SDAT_DRIVEN_SIM_VALUE 0x0
#define LCD_I2C_SDAT_HAS_TRI 1
#define LCD_I2C_SDAT_HAS_OUT 0
#define LCD_I2C_SDAT_HAS_IN 0
#define LCD_I2C_SDAT_CAPTURE 0
#define LCD_I2C_SDAT_BIT_CLEARING_EDGE_REGISTER 0
#define LCD_I2C_SDAT_DATA_WIDTH 1
#define LCD_I2C_SDAT_RESET_VALUE 0x0
#define LCD_I2C_SDAT_EDGE_TYPE "NONE"
#define LCD_I2C_SDAT_IRQ_TYPE "NONE"
#define LCD_I2C_SDAT_FREQ 60000000u

/*
 * Macros for device 'lcd_i2c_scl', class 'altera_avalon_pio'
 * The macros are prefixed with 'LCD_I2C_SCL_'.
 * The prefix is the slave descriptor.
 */
#define LCD_I2C_SCL_BASE 0x8360200
#define LCD_I2C_SCL_SPAN 128u
#define LCD_I2C_SCL_DO_TEST_BENCH_WIRING 0
#define LCD_I2C_SCL_DRIVEN_SIM_VALUE 0x0
#define LCD_I2C_SCL_HAS_TRI 0
#define LCD_I2C_SCL_HAS_OUT 1
#define LCD_I2C_SCL_HAS_IN 0
#define LCD_I2C_SCL_CAPTURE 0
#define LCD_I2C_SCL_BIT_CLEARING_EDGE_REGISTER 0
#define LCD_I2C_SCL_DATA_WIDTH 1
#define LCD_I2C_SCL_RESET_VALUE 0x0
#define LCD_I2C_SCL_EDGE_TYPE "NONE"
#define LCD_I2C_SCL_IRQ_TYPE "NONE"
#define LCD_I2C_SCL_FREQ 60000000u

/*
 * Macros for device 'remote_update', class 'altera_avalon_remote_update_cycloneiii'
 * The macros are prefixed with 'REMOTE_UPDATE_'.
 * The prefix is the slave descriptor.
 */
#define REMOTE_UPDATE_BASE 0x8610000
#define REMOTE_UPDATE_SPAN 2048u

/*
 * Macros for device 'sgdma_rx', class 'altera_avalon_sgdma'
 * The macros are prefixed with 'SGDMA_RX_'.
 * The prefix is the slave descriptor.
 */
#define SGDMA_RX_BASE 0x8702000
#define SGDMA_RX_SPAN 1024u
#define SGDMA_RX_IRQ 4
#define SGDMA_RX_READ_BLOCK_DATA_WIDTH 32
#define SGDMA_RX_WRITE_BLOCK_DATA_WIDTH 32
#define SGDMA_RX_STREAM_DATA_WIDTH 32
#define SGDMA_RX_ADDRESS_WIDTH 32
#define SGDMA_RX_HAS_READ_BLOCK 0
#define SGDMA_RX_HAS_WRITE_BLOCK 1
#define SGDMA_RX_READ_BURSTCOUNT_WIDTH 4
#define SGDMA_RX_WRITE_BURSTCOUNT_WIDTH 4
#define SGDMA_RX_BURST_TRANSFER 0
#define SGDMA_RX_ALWAYS_DO_MAX_BURST 1
#define SGDMA_RX_DESCRIPTOR_READ_BURST 0
#define SGDMA_RX_UNALIGNED_TRANSFER 0
#define SGDMA_RX_CONTROL_SLAVE_DATA_WIDTH 32
#define SGDMA_RX_CONTROL_SLAVE_ADDRESS_WIDTH 8
#define SGDMA_RX_DESC_DATA_WIDTH 32
#define SGDMA_RX_CHAIN_WRITEBACK_DATA_WIDTH 32
#define SGDMA_RX_STATUS_TOKEN_DATA_WIDTH 24
#define SGDMA_RX_BYTES_TO_TRANSFER_DATA_WIDTH 16
#define SGDMA_RX_BURST_DATA_WIDTH 8
#define SGDMA_RX_CONTROL_DATA_WIDTH 8
#define SGDMA_RX_ATLANTIC_CHANNEL_DATA_WIDTH 4
#define SGDMA_RX_COMMAND_FIFO_DATA_WIDTH 104
#define SGDMA_RX_SYMBOLS_PER_BEAT 4
#define SGDMA_RX_IN_ERROR_WIDTH 6
#define SGDMA_RX_OUT_ERROR_WIDTH 0

/*
 * Macros for device 'ddr_sdram', class 'altmemddr'
 * Path to the device is from the master group 'sgdma_rx_m_write'.
 * The macros are prefixed with 'SGDMA_RX_M_WRITE_DDR_SDRAM_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_RX_M_WRITE_DDR_SDRAM_BASE 0x0
#define SGDMA_RX_M_WRITE_DDR_SDRAM_SPAN 33554432u

/*
 * Macros for device 'ext_flash', class 'altera_avalon_cfi_flash'
 * Path to the device is from the master group 'sgdma_rx_m_write'.
 * The macros are prefixed with 'SGDMA_RX_M_WRITE_EXT_FLASH_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_RX_M_WRITE_EXT_FLASH_BASE 0x4000000
#define SGDMA_RX_M_WRITE_EXT_FLASH_SPAN 16777216u
#define SGDMA_RX_M_WRITE_EXT_FLASH_SETUP_VALUE 25
#define SGDMA_RX_M_WRITE_EXT_FLASH_WAIT_VALUE 70
#define SGDMA_RX_M_WRITE_EXT_FLASH_HOLD_VALUE 20
#define SGDMA_RX_M_WRITE_EXT_FLASH_TIMING_UNITS "ns"
#define SGDMA_RX_M_WRITE_EXT_FLASH_SIZE 16777216u

/*
 * Macros for device 'ssram', class 'altera_avalon_cy7c1380_ssram'
 * Path to the device is from the master group 'sgdma_rx_m_write'.
 * The macros are prefixed with 'SGDMA_RX_M_WRITE_SSRAM_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_RX_M_WRITE_SSRAM_BASE 0x5000000
#define SGDMA_RX_M_WRITE_SSRAM_SPAN 1048576u
#define SGDMA_RX_M_WRITE_SSRAM_SRAM_MEMORY_SIZE 1
#define SGDMA_RX_M_WRITE_SSRAM_SRAM_MEMORY_UNITS 1048576
#define SGDMA_RX_M_WRITE_SSRAM_SSRAM_DATA_WIDTH 32
#define SGDMA_RX_M_WRITE_SSRAM_SSRAM_READ_LATENCY 2

/*
 * Macros for device 'sgdma_tx', class 'altera_avalon_sgdma'
 * The macros are prefixed with 'SGDMA_TX_'.
 * The prefix is the slave descriptor.
 */
#define SGDMA_TX_BASE 0x8702400
#define SGDMA_TX_SPAN 1024u
#define SGDMA_TX_IRQ 6
#define SGDMA_TX_READ_BLOCK_DATA_WIDTH 32
#define SGDMA_TX_WRITE_BLOCK_DATA_WIDTH 32
#define SGDMA_TX_STREAM_DATA_WIDTH 32
#define SGDMA_TX_ADDRESS_WIDTH 32
#define SGDMA_TX_HAS_READ_BLOCK 1
#define SGDMA_TX_HAS_WRITE_BLOCK 0
#define SGDMA_TX_READ_BURSTCOUNT_WIDTH 4
#define SGDMA_TX_WRITE_BURSTCOUNT_WIDTH 4
#define SGDMA_TX_BURST_TRANSFER 0
#define SGDMA_TX_ALWAYS_DO_MAX_BURST 1
#define SGDMA_TX_DESCRIPTOR_READ_BURST 0
#define SGDMA_TX_UNALIGNED_TRANSFER 0
#define SGDMA_TX_CONTROL_SLAVE_DATA_WIDTH 32
#define SGDMA_TX_CONTROL_SLAVE_ADDRESS_WIDTH 8
#define SGDMA_TX_DESC_DATA_WIDTH 32
#define SGDMA_TX_CHAIN_WRITEBACK_DATA_WIDTH 32
#define SGDMA_TX_STATUS_TOKEN_DATA_WIDTH 24
#define SGDMA_TX_BYTES_TO_TRANSFER_DATA_WIDTH 16
#define SGDMA_TX_BURST_DATA_WIDTH 8
#define SGDMA_TX_CONTROL_DATA_WIDTH 8
#define SGDMA_TX_ATLANTIC_CHANNEL_DATA_WIDTH 4
#define SGDMA_TX_COMMAND_FIFO_DATA_WIDTH 104
#define SGDMA_TX_SYMBOLS_PER_BEAT 4
#define SGDMA_TX_IN_ERROR_WIDTH 0
#define SGDMA_TX_OUT_ERROR_WIDTH 1

/*
 * Macros for device 'ddr_sdram', class 'altmemddr'
 * Path to the device is from the master group 'sgdma_tx_m_read'.
 * The macros are prefixed with 'SGDMA_TX_M_READ_DDR_SDRAM_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_TX_M_READ_DDR_SDRAM_BASE 0x0
#define SGDMA_TX_M_READ_DDR_SDRAM_SPAN 33554432u

/*
 * Macros for device 'ext_flash', class 'altera_avalon_cfi_flash'
 * Path to the device is from the master group 'sgdma_tx_m_read'.
 * The macros are prefixed with 'SGDMA_TX_M_READ_EXT_FLASH_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_TX_M_READ_EXT_FLASH_BASE 0x4000000
#define SGDMA_TX_M_READ_EXT_FLASH_SPAN 16777216u
#define SGDMA_TX_M_READ_EXT_FLASH_SETUP_VALUE 25
#define SGDMA_TX_M_READ_EXT_FLASH_WAIT_VALUE 70
#define SGDMA_TX_M_READ_EXT_FLASH_HOLD_VALUE 20
#define SGDMA_TX_M_READ_EXT_FLASH_TIMING_UNITS "ns"
#define SGDMA_TX_M_READ_EXT_FLASH_SIZE 16777216u

/*
 * Macros for device 'ssram', class 'altera_avalon_cy7c1380_ssram'
 * Path to the device is from the master group 'sgdma_tx_m_read'.
 * The macros are prefixed with 'SGDMA_TX_M_READ_SSRAM_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_TX_M_READ_SSRAM_BASE 0x5000000
#define SGDMA_TX_M_READ_SSRAM_SPAN 1048576u
#define SGDMA_TX_M_READ_SSRAM_SRAM_MEMORY_SIZE 1
#define SGDMA_TX_M_READ_SSRAM_SRAM_MEMORY_UNITS 1048576
#define SGDMA_TX_M_READ_SSRAM_SSRAM_DATA_WIDTH 32
#define SGDMA_TX_M_READ_SSRAM_SSRAM_READ_LATENCY 2

/*
 * Macros for device 'tse_mac', class 'triple_speed_ethernet'
 * The macros are prefixed with 'TSE_MAC_'.
 * The prefix is the slave descriptor.
 */
#define TSE_MAC_BASE 0x8702800
#define TSE_MAC_SPAN 1024u
#define TSE_MAC_TRANSMIT "sgdma_tx"
#define TSE_MAC_RECEIVE "sgdma_rx"
#define TSE_MAC_TRANSMIT_FIFO_DEPTH 512
#define TSE_MAC_RECEIVE_FIFO_DEPTH 512
#define TSE_MAC_FIFO_WIDTH 32
#define TSE_MAC_ENABLE_MACLITE 0
#define TSE_MAC_MACLITE_GIGE 0
#define TSE_MAC_USE_MDIO 1
#define TSE_MAC_NUMBER_OF_CHANNEL 0
#define TSE_MAC_NUMBER_OF_MAC_MDIO_SHARED 0
#define TSE_MAC_IS_MULTICHANNEL_MAC 0
#define TSE_MAC_MDIO_SHARED 0
#define TSE_MAC_REGISTER_SHARED 0
#define TSE_MAC_PCS 0
#define TSE_MAC_PCS_SGMII 0
#define TSE_MAC_PCS_ID 0u

/*
 * Macros for device 'descriptor_memory', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'DESCRIPTOR_MEMORY_'.
 * The prefix is the slave descriptor.
 */
#define DESCRIPTOR_MEMORY_BASE 0xb000000
#define DESCRIPTOR_MEMORY_SPAN 4096u
#define DESCRIPTOR_MEMORY_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define DESCRIPTOR_MEMORY_INIT_CONTENTS_FILE "descriptor_memory"
#define DESCRIPTOR_MEMORY_NON_DEFAULT_INIT_FILE_ENABLED 0
#define DESCRIPTOR_MEMORY_GUI_RAM_BLOCK_TYPE "Automatic"
#define DESCRIPTOR_MEMORY_WRITABLE 1
#define DESCRIPTOR_MEMORY_DUAL_PORT 0
#define DESCRIPTOR_MEMORY_SIZE_VALUE 4096u
#define DESCRIPTOR_MEMORY_SIZE_MULTIPLE 1
#define DESCRIPTOR_MEMORY_CONTENTS_INFO ""
#define DESCRIPTOR_MEMORY_RAM_BLOCK_TYPE "Auto"
#define DESCRIPTOR_MEMORY_INIT_MEM_CONTENT 1
#define DESCRIPTOR_MEMORY_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define DESCRIPTOR_MEMORY_INSTANCE_ID "NONE"
#define DESCRIPTOR_MEMORY_READ_DURING_WRITE_MODE "DONT_CARE"


#endif /* _CPU_H_ */
