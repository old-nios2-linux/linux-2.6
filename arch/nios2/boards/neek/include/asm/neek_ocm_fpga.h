#ifndef _ALTERA_CPU_H_
#define _ALTERA_CPU_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 *
 * Created from SOPC Builder system 'cycloneIII_embedded_evaluation_kit_standard_sopc' in
 * file './cycloneIII_embedded_evaluation_kit_standard_sopc.sopcinfo'.
 */

/*
 * This file contains macros for module 'cpu' and devices
 * connected to the following masters:
 *   instruction_master
 *   tightly_coupled_instruction_master_0
 *   data_master
 *   tightly_coupled_data_master_0
 *
 * Do not #include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate #defines.
 * Instead, use the system header file which has #defines with unique names.
 */

/*
 * Macros for module 'cpu', class 'altera_nios2'.
 * The macros have no prefix.
 */
#define CPU_IMPLEMENTATION "fast"
#define CPU_FREQ 100000000u
#define ICACHE_LINE_SIZE 32
#define ICACHE_LINE_SIZE_LOG2 5
#define ICACHE_SIZE 8192
#define DCACHE_LINE_SIZE 32
#define DCACHE_LINE_SIZE_LOG2 5
#define DCACHE_SIZE 4096
#define INITDA_SUPPORTED
#define FLUSHDA_SUPPORTED
#define HAS_JMPI_INSTRUCTION
#define MMU_PRESENT
#define KERNEL_REGION_BASE 0xc0000000
#define IO_REGION_BASE 0xe0000000
#define KERNEL_MMU_REGION_BASE 0x80000000
#define USER_REGION_BASE 0x0
#define PROCESS_ID_NUM_BITS 10
#define TLB_NUM_WAYS 16
#define TLB_NUM_WAYS_LOG2 4
#define TLB_PTR_SZ 8
#define TLB_NUM_ENTRIES 256
#define FAST_TLB_MISS_EXCEPTION_ADDR 0xc9000000
#define EXCEPTION_ADDR 0xc0000020
#define RESET_ADDR 0xc4000000
#define BREAK_ADDR 0xc6000020
#define HAS_DEBUG_STUB
#define HAS_DEBUG_CORE 1
#define HAS_ILLEGAL_INSTRUCTION_EXCEPTION
#define HAS_ILLEGAL_MEMORY_ACCESS_EXCEPTION
#define HAS_EXTRA_EXCEPTION_INFO
#define CPU_ID_SIZE 1
#define CPU_ID_VALUE 0x0
#define HARDWARE_DIVIDE_PRESENT 0
#define HARDWARE_MULTIPLY_PRESENT 1
#define HARDWARE_MULX_PRESENT 0
#define INST_ADDR_WIDTH 28
#define DATA_ADDR_WIDTH 28

/*
 * Macros for device 'ddr_sdram', class 'altmemddr'
 * The macros are prefixed with 'DDR_SDRAM_'.
 * The prefix is the slave descriptor.
 */
#define DDR_SDRAM_COMPONENT_TYPE altmemddr
#define DDR_SDRAM_COMPONENT_NAME ddr_sdram
#define DDR_SDRAM_BASE 0x0
#define DDR_SDRAM_SPAN 33554432

/*
 * Macros for device 'lcd_sgdma', class 'altera_avalon_sgdma'
 * The macros are prefixed with 'LCD_SGDMA_'.
 * The prefix is the slave descriptor.
 */
#define LCD_SGDMA_COMPONENT_TYPE altera_avalon_sgdma
#define LCD_SGDMA_COMPONENT_NAME lcd_sgdma
#define LCD_SGDMA_BASE 0x2000000
#define LCD_SGDMA_SPAN 1024u
#define LCD_SGDMA_IRQ 5
#define LCD_SGDMA_READ_BLOCK_DATA_WIDTH 64
#define LCD_SGDMA_WRITE_BLOCK_DATA_WIDTH 64
#define LCD_SGDMA_STREAM_DATA_WIDTH 64
#define LCD_SGDMA_ADDRESS_WIDTH 32
#define LCD_SGDMA_HAS_READ_BLOCK 1
#define LCD_SGDMA_HAS_WRITE_BLOCK 0
#define LCD_SGDMA_READ_BURSTCOUNT_WIDTH 4
#define LCD_SGDMA_WRITE_BURSTCOUNT_WIDTH 4
#define LCD_SGDMA_BURST_TRANSFER 0
#define LCD_SGDMA_ALWAYS_DO_MAX_BURST 1
#define LCD_SGDMA_DESCRIPTOR_READ_BURST 0
#define LCD_SGDMA_UNALIGNED_TRANSFER 0
#define LCD_SGDMA_CONTROL_SLAVE_DATA_WIDTH 32
#define LCD_SGDMA_CONTROL_SLAVE_ADDRESS_WIDTH 8
#define LCD_SGDMA_DESC_DATA_WIDTH 32
#define LCD_SGDMA_CHAIN_WRITEBACK_DATA_WIDTH 32
#define LCD_SGDMA_STATUS_TOKEN_DATA_WIDTH 24
#define LCD_SGDMA_BYTES_TO_TRANSFER_DATA_WIDTH 16
#define LCD_SGDMA_BURST_DATA_WIDTH 8
#define LCD_SGDMA_CONTROL_DATA_WIDTH 8
#define LCD_SGDMA_ATLANTIC_CHANNEL_DATA_WIDTH 4
#define LCD_SGDMA_COMMAND_FIFO_DATA_WIDTH 104
#define LCD_SGDMA_SYMBOLS_PER_BEAT 8
#define LCD_SGDMA_IN_ERROR_WIDTH 0
#define LCD_SGDMA_OUT_ERROR_WIDTH 0

/*
 * Macros for device 'ddr_sdram', class 'altmemddr'
 * Path to the device is from the master group 'lcd_sgdma_m_read'.
 * The macros are prefixed with 'LCD_SGDMA_M_READ_DDR_SDRAM_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define LCD_SGDMA_M_READ_DDR_SDRAM_COMPONENT_TYPE altmemddr
#define LCD_SGDMA_M_READ_DDR_SDRAM_COMPONENT_NAME ddr_sdram
#define LCD_SGDMA_M_READ_DDR_SDRAM_BASE 0x0
#define LCD_SGDMA_M_READ_DDR_SDRAM_SPAN 33554432u

/*
 * Macros for device 'ext_flash', class 'altera_avalon_cfi_flash'
 * The macros are prefixed with 'EXT_FLASH_'.
 * The prefix is the slave descriptor.
 */
#define EXT_FLASH_COMPONENT_TYPE altera_avalon_cfi_flash
#define EXT_FLASH_COMPONENT_NAME ext_flash
#define EXT_FLASH_BASE 0x4000000
#define EXT_FLASH_SPAN 16777216u
#define EXT_FLASH_SETUP_VALUE 25
#define EXT_FLASH_WAIT_VALUE 100
#define EXT_FLASH_HOLD_VALUE 20
#define EXT_FLASH_TIMING_UNITS "ns"
#define EXT_FLASH_SIZE 16777216u

/*
 * Macros for device 'ssram', class 'altera_avalon_cy7c1380_ssram'
 * The macros are prefixed with 'SSRAM_'.
 * The prefix is the slave descriptor.
 */
#define SSRAM_COMPONENT_TYPE altera_avalon_cy7c1380_ssram
#define SSRAM_COMPONENT_NAME ssram
#define SSRAM_BASE 0x5000000
#define SSRAM_SPAN 1048576u
#define SSRAM_SRAM_MEMORY_SIZE 1
#define SSRAM_SRAM_MEMORY_UNITS 1048576
#define SSRAM_SSRAM_DATA_WIDTH 32
#define SSRAM_SSRAM_READ_LATENCY 2

/*
 * Macros for device 'igor_mac', class 'eth_ocm'
 * The macros are prefixed with 'IGOR_MAC_'.
 * The prefix is the slave descriptor.
 */
#define IGOR_MAC_COMPONENT_TYPE eth_ocm
#define IGOR_MAC_COMPONENT_NAME igor_mac
#define IGOR_MAC_BASE 0x8000000
#define IGOR_MAC_SPAN 4096u
#define IGOR_MAC_IRQ 1

/*
 * Macros for device 'remote_update', class 'altera_avalon_remote_update_cycloneiii'
 * The macros are prefixed with 'REMOTE_UPDATE_'.
 * The prefix is the slave descriptor.
 */
#define REMOTE_UPDATE_COMPONENT_TYPE altera_avalon_remote_update_cycloneiii
#define REMOTE_UPDATE_COMPONENT_NAME remote_update
#define REMOTE_UPDATE_BASE 0x8001000
#define REMOTE_UPDATE_SPAN 512u

/*
 * Macros for device 'pll', class 'altera_avalon_pll'
 * The macros are prefixed with 'PLL_'.
 * The prefix is the slave descriptor.
 */
#define PLL_COMPONENT_TYPE altera_avalon_pll
#define PLL_COMPONENT_NAME pll
#define PLL_BASE 0x8001200
#define PLL_SPAN 64u
#define PLL_ARESET "None"
#define PLL_PFDENA "None"
#define PLL_LOCKED "None"
#define PLL_PLLENA "None"
#define PLL_SCANCLK "None"
#define PLL_SCANDATA "None"
#define PLL_SCANREAD "None"
#define PLL_SCANWRITE "None"
#define PLL_SCANCLKENA "None"
#define PLL_SCANACLR "None"
#define PLL_SCANDATAOUT "None"
#define PLL_SCANDONE "None"
#define PLL_CONFIGUPDATE "None"
#define PLL_PHASECOUNTERSELECT "None"
#define PLL_PHASEDONE "None"
#define PLL_PHASEUPDOWN "None"
#define PLL_PHASESTEP "None"

/*
 * Macros for device 'sys_clk_timer', class 'altera_avalon_timer'
 * The macros are prefixed with 'SYS_CLK_TIMER_'.
 * The prefix is the slave descriptor.
 */
#define SYS_CLK_TIMER_COMPONENT_TYPE altera_avalon_timer
#define SYS_CLK_TIMER_COMPONENT_NAME sys_clk_timer
#define SYS_CLK_TIMER_BASE 0x8001240
#define SYS_CLK_TIMER_SPAN 64u
#define SYS_CLK_TIMER_IRQ 0
#define SYS_CLK_TIMER_ALWAYS_RUN 0
#define SYS_CLK_TIMER_FIXED_PERIOD 0
#define SYS_CLK_TIMER_SNAPSHOT 1
#define SYS_CLK_TIMER_PERIOD 10.0
#define SYS_CLK_TIMER_PERIOD_UNITS "ms"
#define SYS_CLK_TIMER_RESET_OUTPUT 0
#define SYS_CLK_TIMER_TIMEOUT_PULSE_OUTPUT 0
#define SYS_CLK_TIMER_FREQ 60000000u
#define SYS_CLK_TIMER_LOAD_VALUE 599999ULL
#define SYS_CLK_TIMER_COUNTER_SIZE 32
#define SYS_CLK_TIMER_MULT 0.0010
#define SYS_CLK_TIMER_TICKS_PER_SEC 100u

/*
 * Macros for device 'performance_counter', class 'altera_avalon_performance_counter'
 * The macros are prefixed with 'PERFORMANCE_COUNTER_'.
 * The prefix is the slave descriptor.
 */
#define PERFORMANCE_COUNTER_COMPONENT_TYPE altera_avalon_performance_counter
#define PERFORMANCE_COUNTER_COMPONENT_NAME performance_counter
#define PERFORMANCE_COUNTER_BASE 0x8001280
#define PERFORMANCE_COUNTER_SPAN 64u
#define PERFORMANCE_COUNTER_HOW_MANY_SECTIONS 1

/*
 * Macros for device 'touch_panel_spi', class 'altera_avalon_spi'
 * The macros are prefixed with 'TOUCH_PANEL_SPI_'.
 * The prefix is the slave descriptor.
 */
#define TOUCH_PANEL_SPI_COMPONENT_TYPE altera_avalon_spi
#define TOUCH_PANEL_SPI_COMPONENT_NAME touch_panel_spi
#define TOUCH_PANEL_SPI_BASE 0x80012c0
#define TOUCH_PANEL_SPI_SPAN 64u
#define TOUCH_PANEL_SPI_IRQ 3
#define TOUCH_PANEL_SPI_DATABITS 8
#define TOUCH_PANEL_SPI_DATAWIDTH 16
#define TOUCH_PANEL_SPI_TARGETCLOCK 32000u
#define TOUCH_PANEL_SPI_CLOCKUNITS "Hz"
#define TOUCH_PANEL_SPI_CLOCKMULT 1
#define TOUCH_PANEL_SPI_NUMSLAVES 1
#define TOUCH_PANEL_SPI_ISMASTER 1
#define TOUCH_PANEL_SPI_CLOCKPOLARITY 0
#define TOUCH_PANEL_SPI_CLOCKPHASE 0
#define TOUCH_PANEL_SPI_LSBFIRST 0
#define TOUCH_PANEL_SPI_EXTRADELAY 0
#define TOUCH_PANEL_SPI_TARGETSSDELAY "0.0"
#define TOUCH_PANEL_SPI_DELAYUNITS "ns"
#define TOUCH_PANEL_SPI_DELAYMULT "1.0E-9"
#define TOUCH_PANEL_SPI_PREFIX "spi_"

/*
 * Macros for device 'mmc_spi', class 'altera_avalon_spi'
 * The macros are prefixed with 'MMC_SPI_'.
 * The prefix is the slave descriptor.
 */
#define MMC_SPI_COMPONENT_TYPE altera_avalon_spi
#define MMC_SPI_COMPONENT_NAME mmc_spi
#define MMC_SPI_BASE 0x8001300
#define MMC_SPI_SPAN 64u
#define MMC_SPI_IRQ 8
#define MMC_SPI_DATABITS 8
#define MMC_SPI_DATAWIDTH 16
#define MMC_SPI_TARGETCLOCK 20000000u
#define MMC_SPI_CLOCKUNITS "Hz"
#define MMC_SPI_CLOCKMULT 1
#define MMC_SPI_NUMSLAVES 1
#define MMC_SPI_ISMASTER 1
#define MMC_SPI_CLOCKPOLARITY 0
#define MMC_SPI_CLOCKPHASE 0
#define MMC_SPI_LSBFIRST 0
#define MMC_SPI_EXTRADELAY 0
#define MMC_SPI_TARGETSSDELAY "0.0"
#define MMC_SPI_DELAYUNITS "ns"
#define MMC_SPI_DELAYMULT "1.0E-9"
#define MMC_SPI_PREFIX "spi_"

/*
 * Macros for device 'uart', class 'altera_avalon_uart'
 * The macros are prefixed with 'UART_'.
 * The prefix is the slave descriptor.
 */
#define UART_COMPONENT_TYPE altera_avalon_uart
#define UART_COMPONENT_NAME uart
#define UART_BASE 0x8001340
#define UART_SPAN 64u
#define UART_IRQ 6
#define UART_BAUD 115200
#define UART_DATA_BITS 8
#define UART_FIXED_BAUD 1
#define UART_PARITY 'N'
#define UART_STOP_BITS 1
#define UART_SYNC_REG_DEPTH 2
#define UART_USE_CTS_RTS 0
#define UART_USE_EOP_REGISTER 0
#define UART_SIM_TRUE_BAUD 0
#define UART_SIM_CHAR_STREAM ""
#define UART_FREQ 66500000u

/*
 * Macros for device 'touch_panel_pen_irq_n', class 'altera_avalon_pio'
 * The macros are prefixed with 'TOUCH_PANEL_PEN_IRQ_N_'.
 * The prefix is the slave descriptor.
 */
#define TOUCH_PANEL_PEN_IRQ_N_COMPONENT_TYPE altera_avalon_pio
#define TOUCH_PANEL_PEN_IRQ_N_COMPONENT_NAME touch_panel_pen_irq_n
#define TOUCH_PANEL_PEN_IRQ_N_BASE 0x80013e0
#define TOUCH_PANEL_PEN_IRQ_N_SPAN 32u
#define TOUCH_PANEL_PEN_IRQ_N_IRQ 4
#define TOUCH_PANEL_PEN_IRQ_N_DO_TEST_BENCH_WIRING 0
#define TOUCH_PANEL_PEN_IRQ_N_DRIVEN_SIM_VALUE 0x0
#define TOUCH_PANEL_PEN_IRQ_N_HAS_TRI 0
#define TOUCH_PANEL_PEN_IRQ_N_HAS_OUT 0
#define TOUCH_PANEL_PEN_IRQ_N_HAS_IN 1
#define TOUCH_PANEL_PEN_IRQ_N_CAPTURE 1
#define TOUCH_PANEL_PEN_IRQ_N_BIT_CLEARING_EDGE_REGISTER 0
#define TOUCH_PANEL_PEN_IRQ_N_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TOUCH_PANEL_PEN_IRQ_N_DATA_WIDTH 1
#define TOUCH_PANEL_PEN_IRQ_N_RESET_VALUE 0x0
#define TOUCH_PANEL_PEN_IRQ_N_EDGE_TYPE "FALLING"
#define TOUCH_PANEL_PEN_IRQ_N_IRQ_TYPE "EDGE"
#define TOUCH_PANEL_PEN_IRQ_N_FREQ 60000000u

/*
 * Macros for device 'sysid', class 'altera_avalon_sysid'
 * The macros are prefixed with 'SYSID_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_COMPONENT_TYPE altera_avalon_sysid
#define SYSID_COMPONENT_NAME sysid
#define SYSID_BASE 0x8001400
#define SYSID_SPAN 16u
#define SYSID_ID 1597074984u
#define SYSID_TIMESTAMP 1254740213u

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x8001410
#define JTAG_UART_SPAN 16u
#define JTAG_UART_IRQ 7
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8
#define JTAG_UART_READ_THRESHOLD 8

/*
 * Macros for device 'ps2_0', class 'altera_up_avalon_ps2_classic'
 * The macros are prefixed with 'PS2_0_'.
 * The prefix is the slave descriptor.
 */
#define PS2_0_COMPONENT_TYPE altera_up_avalon_ps2_classic
#define PS2_0_COMPONENT_NAME ps2_0
#define PS2_0_BASE 0x8001420
#define PS2_0_SPAN 8u
#define PS2_0_IRQ 9

/*
 * Macros for device 'gpio_0', class 'gpio'
 * The macros are prefixed with 'GPIO_0_'.
 * The prefix is the slave descriptor.
 */
#define GPIO_0_COMPONENT_TYPE gpio
#define GPIO_0_COMPONENT_NAME gpio_0
#define GPIO_0_BASE 0x8001500
#define GPIO_0_SPAN 128u

/*
 * Macros for device 'onchip_memory2_0', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'ONCHIP_MEMORY2_0_'.
 * The prefix is the slave descriptor.
 */
#define ONCHIP_MEMORY2_0_COMPONENT_TYPE altera_avalon_onchip_memory2
#define ONCHIP_MEMORY2_0_COMPONENT_NAME onchip_memory2_0
#define ONCHIP_MEMORY2_0_BASE 0x9000000
#define ONCHIP_MEMORY2_0_SPAN 512u
#define ONCHIP_MEMORY2_0_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define ONCHIP_MEMORY2_0_INIT_CONTENTS_FILE "onchip_memory2_0"
#define ONCHIP_MEMORY2_0_NON_DEFAULT_INIT_FILE_ENABLED 0
#define ONCHIP_MEMORY2_0_GUI_RAM_BLOCK_TYPE "Automatic"
#define ONCHIP_MEMORY2_0_WRITABLE 1
#define ONCHIP_MEMORY2_0_DUAL_PORT 1
#define ONCHIP_MEMORY2_0_SIZE_VALUE 512u
#define ONCHIP_MEMORY2_0_SIZE_MULTIPLE 1
#define ONCHIP_MEMORY2_0_CONTENTS_INFO ""
#define ONCHIP_MEMORY2_0_RAM_BLOCK_TYPE "Auto"
#define ONCHIP_MEMORY2_0_INIT_MEM_CONTENT 1
#define ONCHIP_MEMORY2_0_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define ONCHIP_MEMORY2_0_INSTANCE_ID "NONE"
#define ONCHIP_MEMORY2_0_READ_DURING_WRITE_MODE "DONT_CARE"


#endif /* _ALTERA_CPU_H_ */
